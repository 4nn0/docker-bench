---
controls:
id: " "
description: "CIS Docker Community Edition Benchmark"
groups:
- id: 1
  description: "Host Configuration"
  checks:
  - id: 1.1
    description: "Ensure a separate partition for containers has been created (Scored)"
    audit: grep /var/lib/docker /etc/fstab
    tests:
      test_items:
      - flag: "/var/lib/docker"
        compare:
          op: has
          value: "/var/lib/docker"
        set: true
    remediation: "For new installations, create a separate partition for /var/lib/docker
    mount point. For systems that were previously installed, use the Logical Volume Manager
    (LVM) to create partitions."
    scored: true

  - id: 1.2
    description: "Ensure the container host has been Hardened (Not Scored)"
    type: manual
    remediation: "You may consider various CIS Security Benchmarks for your container host.
    If you have other security guidelines or regulatory requirements to adhere to, please 
    follow them as suitable in your environment.
    Additionally, you can run a kernel with grsecurity and PaX . This would add many safety
    checks, both at compile-time and run-time. It is also designed to defeat many exploits and
    has powerful security features. These features do not require Docker-specific
    configuration, since those security features apply system-wide, independent of containers."
    scored: false

  - id: 1.3
    description: "Ensure Docker is up to date (Not Scored)"
    audit: "docker version"
    type: manual
    remediation: "Keep a track of Docker releases and update as necessary."
    scored: false

  - id: 1.4
    description: "Ensure only trusted users are allowed to control Docker daemon (Scored)"
    audit: "getent group docker"
    type: manual
    remediation: "Remove any users from the docker group that are not trusted. Additionally,
    do not create a mapping of sensitive directories on host to container volumes."
    scored: true

  - id: 1.5
    description: "Ensure auditing is configured for the docker daemon (Scored)"
    audit: "auditctl -l | grep /usr/bin/docker"
    tests:
      test_items:
      - flag: "/usr/bin/docker"
        compare:
          op: has
          value: "/usr/bin/docker"
        set: true
    remediation: "Add a rule for Docker daemon.
        For example,
        Add the line as below line in /etc/audit/audit.rules file:\n
        -w /usr/bin/docker -k docker\n
        Then, restart the audit daemon. For example,\n
        service auditd restart"
    scored: true

  - id: 1.6
    description: "Ensure auditing is configured for Docker files and directories - 
    /var/lib/docker (Scored)"
    audit: "auditctl -l | grep /var/lib/docker"
    tests:
      test_items:
      - flag: "/var/lib/docker"
        compare:
          op: has
          value: "/var/lib/docker"
        set: true
    remediation: "Add a rule for /var/lib/docker directory.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /var/lib/docker -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

  - id: 1.7
    description: "Ensure auditing is configured for Docker files and directories -
    /etc/docker (Scored)"
    audit: "auditctl -l | grep /etc/docker"
    tests:
      test_items:
      - flag: "/etc/docker"
        compare:
          op: has
          value: "/etc/docker"
        set: true
    remediation: "Add a rule for /etc/docker directory.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /etc/docker -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

    # Revisit this check
  - id: 1.8
    description: "Ensure auditing is configured for Docker files and directories -
    docker.service (Scored)"
    audit: "auditctl -l | grep docker.service"
    tests:
      test_items:
      - flag: "docker.service"
        compare:
          op: has
          value: "docker.service"
        set: true
    remediation: "If the file exists, add a rule for it.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /usr/lib/systemd/system/docker.service -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

    # Revisit this check
  - id: 1.9
    description: "Ensure auditing is configured for Docker files and directories -
    docker.socket (Scored)"
    audit: "auditctl -l | grep docker.socket"
    tests:
      test_items:
      - flag: "docker.socket"
        compare:
          op: has
          value: "docker.socket"
        set: true
    remediation: "If the file exists, add a rule for it.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /usr/lib/systemd/system/docker.socket -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

  - id: 1.10
    description: "Ensure auditing is configured for Docker files and directories -
    /etc/default/docker (Scored)"
    audit: "auditctl -l | grep /etc/default/docker"
    tests:
      test_items:
      - flag: "/etc/default/docker"
        compare:
          op: has
          value: "/etc/default/docker"
        set: true
    remediation: "Add a rule for /etc/default/docker file.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /etc/default/docker -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

  - id: 1.11
    description: "Ensure auditing is configured for Docker files and directories -
    /etc/docker/daemon.json (Scored)"
    audit: "auditctl -l | grep /etc/docker/daemon.json"
    tests:
      test_items:
      - flag: "/etc/docker/daemon.json"
        compare:
          op: has
          value: "/etc/docker/daemon.json"
        set: true
    remediation: "Add a rule for /etc/docker/daemon.json file.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /etc/docker/daemon.json -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

  - id: 1.12
    description: "Ensure auditing is configured for Docker files and directories -
    /usr/bin/docker-containerd (Scored)"
    audit: "auditctl -l | grep /usr/bin/docker-containerd"
    tests:
      test_items:
      - flag: "/usr/bin/docker-containerd"
        compare:
          op: has
          value: "/usr/bin/docker-containerd"
        set: true
    remediation: "Add a rule for /usr/bin/docker-containerd file.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /usr/bin/docker-containerd -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

  - id: 1.13
    description: "Ensure auditing is configured for Docker files and directories -
    /usr/bin/docker-runc (Scored)"
    audit: "auditctl -l | grep /usr/bin/docker-runc"
    tests:
      test_items:
      - flag: "/usr/bin/docker-runc"
        compare:
          op: has
          value: "/usr/bin/docker-runc"
        set: true
    remediation: "Add a rule for /usr/bin/docker-runc file.
    For example,
    Add the line as below in /etc/audit/audit.rules file:\n
    -w /usr/bin/docker-runc -k docker\n
    Then, restart the audit daemon. For example,\n
    service auditd restart"
    scored: true

- id: 2
  description: "Docker daemon configuration"
  checks:
  - id: 2.1
    description: "Ensure network traffic is restricted between containers on the
    default bridge (Scored)"
    audit: "docker network ls --quiet | xargs docker network inspect --format '{{ .Name }}: {{ .Options }}'"
    tests:
      test_items:
      - flag: "com.docker.network.bridge.enable_icc:false"
        compare:
          op: has
          value: "com.docker.network.bridge.enable_icc:false"
        set: true
    remediation: |
      Run the docker in daemon mode and pass --icc=false as an argument.
      For Example,
      dockerd --icc=false
      Alternatively, you can follow the Docker documentation and create a custom network and
      only join containers that need to communicate to that custom network. The --icc
      parameter only applies to the default docker bridge, if custom networks are used then the
      approach of segmenting networks should be adopted instead.
    scored: true

  - id: 2.2
    description: "Ensure the logging level is set to 'info' (Scored)"
    audit: "ps -ef | grep docker"
    tests:
      bin_op: or
      test_items:
      - flag: "--log-level"
        set: false
      - flag: "--log-level"
        compare:
          op: eq
          value: "info"
        set: true
    remediation: |
      ps -ef | grep docker
    scored: true

  - id: 2.3
    description: "Ensure Docker is allowed to make changes to iptables (Scored)"
    audit: "ps -ef | grep dockerd"
    tests:
      bin_op: or
      test_items:
      - flag: "--iptables"
        set: false
      - flag: "--iptables"
        compare:
          op: eq
          value: true
        set: true
    remediation: |
      Do not run the Docker daemon with --iptables=false parameter. For example, do not
      start the Docker daemon as below:
      dockerd --iptables=false
    scored: true

  - id: 2.4
    description: "Ensure insecure registries are not used (Scored)"
    audit: "ps -ef | grep dockerd"
    tests:
      test_items:
      - flag: "--insecure-registry"
        set: false
    remediation: |
      Do not use any insecure registries.
      For example, do not start the Docker daemon as below:
      dockerd --insecure-registry 10.1.0.0/16
    scored: true

  - id: 2.5
    description: "Ensure aufs storage driver is not used (Scored)"
    audit: docker info | grep -e "^Storage Driver:\s*aufs\s*$"
    tests:
      test_items:
      - flag: "storage-driver"
        compare:
          op: eq
          value: ""
        set: true
    remediation: |
      Do not explicitly use aufs as storage driver.
      For example, do not start Docker daemon as below:
      dockerd --storage-driver aufs
    scored: true

  - id: 2.6
    description: "Ensure TLS authentication for Docker daemon is configured (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--tlsverify"
        set: true
      - flag: "--tlscacert"
        set: true
      - flag: "--tlscert"
        set: true
      - flag: "--tlskey"
        set: true
    remediation: |
      Follow the steps mentioned in the Docker documentation or other references.
    scored: true

  - id: 2.7
    description: "Ensure the default ulimit is configured appropriately (Not Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--default-ulimit"
        set: true
    remediation: |
      Run the docker in daemon mode and pass --default-ulimit as argument with respective
      ulimits as appropriate in your environment.
      For Example,
      dockerd --default-ulimit nproc=1024:2048 --default-ulimit nofile=100:200
    scored: false

  - id: 2.8
    description: "Enable user namespace support (Scored)"
    audit: docker info --format '{{ .SecurityOptions }}'
    tests:
      test_items:
      - flag: "userns"
        compare:
          op: has
          value: "userns"
        set: true
    remediation: |
      Please consult Docker documentation for various ways in which this can be configured
      depending upon your requirements. Your steps might also vary based on platform - For
      example, on Red Hat, sub-UIDs and sub-GIDs mapping creation does not work
      automatically. You might have to create your own mapping.
      However, the high-level steps are as below:
      Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.
      touch /etc/subuid /etc/subgid
      Step 2: Start the docker daemon with --userns-remap flag
      dockerd --userns-remap=default
    scored: true

  - id: 2.9
    description: "Ensure the default cgroup usage has been confirmed (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      bin_op: or
      test_items:
      - flag: "--cgroup-parent"
        set: false
      - flag: "--cgroup-parent"
        compare:
          op: nothave
          value: "/docker"
        set: true
    remediation: |
      The default setting is good enough and can be left as-is. If you want to specifically set a non-
      default cgroup, pass --cgroup-parent parameter to the docker daemon when starting it.
      For Example,
      dockerd --cgroup-parent=/foobar
    scored: true

  - id: 2.10
    description: "Ensure base device size is not changed until needed (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--storage-opt"
        set: false
    remediation: |
      Do not set --storage-opt dm.basesize until needed.
    scored: true

  - id: 2.11
    description: "Ensure that authorization for Docker client commands is enabled
    (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--authorization-plugin"
        set: true
    remediation: |
      Step 1: Install/Create an authorization plugin.
      Step 2: Configure the authorization policy as desired.
      Step 3: Start the docker daemon as below:
      dockerd --authorization-plugin=<PLUGIN_ID>
    scored: true

  - id: 2.12
    description: "Ensure centralized and remote logging is configured (Scored)"
    audit: ps -ef | grep dockerd
    type: manual
    tests:
      test_items:
      - flag: "--log-driver"
        set: true
    remediation: |
      Step 1: Setup the desired log driver by following its documentation.
      Step 2: Start the docker daemon with that logging driver.
      For example,
      dockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx
    scored: true

  - id: 2.13
    description: "Ensure operations on legacy registry (v1) are Disabled (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--disable-legacy-registry"
        set: true
    remediation: |
      Start the docker daemon as below:
      dockerd --disable-legacy-registry
    scored: true

  - id: 2.14
    description: "Ensure live restore is Enabled (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--live-restore"
        set: true
    remediation: |
      Run the docker in daemon mode and pass --live-restore as an argument.
      For Example,
      dockerd --live-restore
    scored: true

  - id: 2.15
    description: "Ensure Userland Proxy is Disabled (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--userland-proxy"
        compare:
          op: eq
          value: "false"
        set: true
    remediation: |
      Run the Docker daemon as below:
      dockerd --userland-proxy=false
    scored: true

  - id: 2.16
    description: "Ensure daemon-wide custom seccomp profile is applied, if needed
    (Not Scored)"
    audit: docker info --format '{{ .SecurityOptions }}'
    tests:
      test_items:
      - flag: "profile"
        compare:
          op: has
          value: "default"
        set: true
    remediation: |
      By default, Docker's default seccomp profile is applied. If this is good for your environment,
      no action is necessary. Alternatively, if you choose to apply your own seccomp profile, use
      the --seccomp-profile flag at daemon start or put it in the daemon runtime parameters
      file.
      dockerd --seccomp-profile </path/to/seccomp/profile>
    scored: false

  - id: 2.17
    description: "Ensure experimental features are avoided in production (Scored)"
    audit: docker version --format '{{ .Server.Experimental }}'
    tests:
      test_items:
      - flag: "false"
        compare:
          op: eq
          value: "false"
        set: true
    remediation: |
      Do not pass --experimental as a runtime parameter to the docker daemon.
    scored: true

  - id: 2.18
    description: "Ensure containers are restricted from acquiring new privileges
    (Scored)"
    audit: ps -ef | grep dockerd
    tests:
      test_items:
      - flag: "--no-new-privileges"
        compare:
          op: noteq
          value: "false"
        set: true
    remediation: |
      Run the Docker daemon as below:
      dockerd --no-new-privileges
    scored: true

- id: 3
  description: "Docker daemon configuration files"
  checks:
  - id: 3.1
    description: "Ensure that docker.service file ownership is set to root:root (Scored)"
    audit: systemctl show -p FragmentPath docker.service | cut -d= -f2 | xargs stat -c %U:%G
    tests:
      test_items:
      - flag: "root:root"
        compare:
          op: eq
          value: "root:root"
        set: true
    remediation: |
      Step 1: Find out the file location:
      systemctl show -p FragmentPath docker.service
      Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
      execute the below command with the correct file path to set the ownership and group
      ownership for the file to root .
      For example,
      chown root:root /usr/lib/systemd/system/docker.service
    scored: true

  - id: 3.2
    description: "Ensure that docker.service file permissions are set to 644 or more
    restrictive (Scored)"
    audit: systemctl show -p FragmentPath docker.service | cut -d= -f2 | xargs stat -c %a
    tests:
      test_items:
      - flag: "644"
        compare:
          op: eq
          value: "644"
        set: true
    remediation: |
      Step 1: Find out the file location:
      systemctl show -p FragmentPath docker.service
      Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
      execute the below command with the correct file path to set the file permissions to 644 .
      For example,
      chmod 644 /usr/lib/systemd/system/docker.service
    scored: true

  - id: 3.3
    description: "Ensure that docker.socket file ownership is set to root:root (Scored)"
    audit: systemctl show -p FragmentPath docker.socket | cut -d= -f2 | xargs stat -c %U:%G
    tests:
      test_items:
      - flag: "root:root"
        compare:
          op: eq
          value: "root:root"
        set: true
    remediation: |
      Step 1: Find out the file location:
      systemctl show -p FragmentPath docker.socket
      Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
      execute the below command with the correct file path to set the ownership and group
      ownership for the file to root .
      For example,
      chown root:root /usr/lib/systemd/system/docker.socket
    scored: true

  - id: 3.4
    description: "Ensure that docker.socket file permissions are set to 644 or more
    restrictive (Scored)"
    audit: systemctl show -p FragmentPath docker.socket | cut -d= -f2 | xargs stat -c %a
    tests:
      test_items:
      - flag: "644"
        compare:
          op: eq
          value: "644"
        set: true
    remediation: |
      Step 1: Find out the file location:
      systemctl show -p FragmentPath docker.socket
      Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
      execute the below command with the correct file path to set the file permissions to 644 .
      For example,
      chmod 644 /usr/lib/systemd/system/docker.socket
    scored: true

  - id: 3.5
    description: "Ensure that /etc/docker directory ownership is set to root:root
    (Scored)"
    audit: stat -c %U:%G /etc/docker
    tests:
      test_items:
      - flag: "root:root"
        compare:
          op: eq
          value: "root:root"
        set: true
    remediation: |
      chown root:root /etc/docker
      This would set the ownership and group-ownership for the directory to root .
    scored: true

  - id: 3.6
    description: "Ensure that /etc/docker directory permissions are set to 755 or more
    restrictive (Scored)"
    audit: stat -c %a /etc/docker
    tests:
      bin_op: or
      test_items:
      - flag: "755"
        compare:
          op: eq
          value: "755"
        set: true
      - flag: "750"
        compare:
          op: eq
          value: "750"
        set: true
      - flag: "700"
        compare:
          op: eq
          value: "700"
        set: true
    remediation: |
      chmod 755 /etc/docker
      This would set the permissions for the directory to 755 .
    scored: true

  - id: 3.7
    description: "Ensure that registry certificate file ownership is set to root:root
    (Scored)"
    audit: /bin/sh -c "if [ -d /etc/docker/certs.d ]; then stat -c %U:%G /etc/docker/certs.d/*; fi"
    tests:
      test_items:
      - flag: "root:root"
        compare:
          op: eq
          value: ""
        set: true
    remediation: |
      chown root:root /etc/docker/certs.d/<registry-name>/*
      This would set the ownership and group-ownership for the registry certificate files to root .
    scored: true

  - id: 3.8
    description: "Ensure that registry certificate file permissions are set to 444 or
    more restrictive (Scored)"
    audit: /bin/sh -c "if [ -d /etc/docker/certs.d ]; then stat -c %a /etc/docker/certs.d/*; fi"
    tests:
      test_items:
      - flag: "444"
        compare:
          op: eq
          value: "444"
        set: true
    remediation: |
      chmod 444 /etc/docker/certs.d/<registry-name>/*
      This would set the permissions for registry certificate files to 444 .
    scored: true

  - id: 3.9
    description: "Ensure that TLS CA certificate file ownership is set to root:root
    (Scored)"
    type: manual
    remediation: |
      chown root:root <path to TLS CA certificate file>
      This would set the ownership and group-ownership for the TLS CA certificate file to root .
    scored: true

  - id: 3.10
    description: "Ensure that TLS CA certificate file permissions are set to 444 or
    more restrictive (Scored)"
    type: manual
    remediation: |
      chmod 444 <path to TLS CA certificate file>
      This would set the file permissions of the TLS CA file to 444 .
    scored: true

  - id: 3.11
    description: "Ensure that Docker server certificate file ownership is set to
    root:root (Scored)"
    type: manual
    remediation: |
      chown root:root <path to Docker server certificate file>
      This would set the ownership and group-ownership for the Docker server certificate file to
      root .
    scored: true

  - id: 3.12
    description: "Ensure that Docker server certificate file permissions are set to 444
    or more restrictive (Scored)"
    type: manual
    remediation: |
      chmod 444 <path to Docker server certificate file>
      This would set the file permissions of the Docker server file to 444 .
    scored: true

  - id: 3.13
    description: "Ensure that Docker server certificate key file ownership is set to
    root:root (Scored)"
    type: manual
    remediation: |
      chown root:root <path to Docker server certificate key file>
      This would set the ownership and group-ownership for the Docker server certificate key
      file to root.
    scored: true

  - id: 3.14
    description: "Ensure that Docker server certificate key file permissions are set to
    400 (Scored)"
    type: manual
    remediation: |
      chmod 400 <path to Docker server certificate key file>
      This would set the Docker server certificate key file permissions to 400 .
    scored: true

  - id: 3.15
    description: "Ensure that Docker socket file ownership is set to root:docker
    (Scored)"
    audit: /bin/sh -c "if [ -f /var/run/docker.sock ]; then stat -c %U:%G /var/run/docker.sock; fi"
    tests:
      test_items:
      - flag: "root:docker"
        compare:
          op: eq
          value: "root:docker"
        set: true
    remediation: |
      chown root:docker /var/run/docker.sock
      This would set the ownership to root and group-ownership to docker for default Docker
      socket file.
    scored: true

  - id: 3.16
    description: "Ensure that Docker socket file permissions are set to 660 or more
    restrictive (Scored)"
    audit: /bin/sh -c "if [ -f /var/run/docker.sock ]; then stat -c %a /var/run/docker.sock; fi"
    tests:
      bin_op: or
      test_items:
      - flag: "660"
        compare:
          op: eq
          value: "660"
        set: true
      test_items:
      - flag: "600"
        compare:
          op: eq
          value: "600"
        set: true
    remediation: |
      chmod 660 /var/run/docker.sock
      This would set the file permissions of the Docker socket file to 660 .
    scored: true

  - id: 3.17
    description: "Ensure that daemon.json file ownership is set to root:root (Scored)"
    audit: /bin/sh -c "if [ -f /etc/docker/daemon.json ]; then stat -c %U:%G /etc/docker/daemon.json; fi"
    tests:
      test_items:
      - flag: "root:root"
        compare:
          op: eq
          value: "root:root"
        set: true
    remediation: |
      chown root:root /etc/docker/daemon.json
      This would set the ownership and group-ownership for the file to root .
    scored: true

  - id: 3.18
    description: "Ensure that daemon.json file permissions are set to 644 or more
    restrictive (Scored)"
    audit: /bin/sh -c "if [ -f /etc/docker/daemon.json ]; then stat -c %a /etc/docker/daemon.json; fi"
    tests:
      bin_op: or
      test_items:
      - flag: "644"
        compare:
          op: eq
          value: "644"
        set: true
      - flag: "640"
        compare:
          op: eq
          value: "640"
        set: true
      - flag: "600"
        compare:
          op: eq
          value: "600"
        set: true
    remediation: |
      chown root:root /etc/default/docker
      This would set the ownership and group-ownership for the file to root .
    scored: true

  - id: 3.19
    description: "Ensure that /etc/default/docker file ownership is set to root:root
    (Scored)"
    audit: /bin/sh -c "if [ -f /etc/default/docker ]; then stat -c %U:%G /etc/default/docker; fi"
    tests:
      test_items:
      - flag: "root:root"
        compare:
          op: eq
          value: "root:root"
        set: true
    remediation: |
      chown root:root /etc/default/docker
      This would set the ownership and group-ownership for the file to root .
    scored: true

  - id: 3.20
    description: "Ensure that /etc/default/docker file permissions are set to 644 or
    more restrictive (Scored)"
    audit: /bin/sh -c "if [ -f /etc/default/docker ]; then stat -c %a /etc/default/docker; fi"
    tests:
      bin_op: or
      test_items:
      - flag: "644"
        compare:
          op: eq
          value: "644"
        set: true
      - flag: "640"
        compare:
          op: eq
          value: "640"
        set: true
      - flag: "600"
        compare:
          op: eq
          value: "600"
        set: true
    remediation: |
      chmod 644 /etc/default/docker
      This would set the file permissions for this file to 644 .
    scored: true
